import React, { useEffect, useState } from "react";
import "../../assets/css/user/homepage.css";
import {
  FaArrowCircleRight,
  FaCloudRain,
  FaHandPointRight,
  FaList,
  FaPhone,
  FaWater,
} from "react-icons/fa";
import { FaCheck } from "react-icons/fa";
import Header from "../reuse/Header";
import Footer from "../reuse/Footer";
import { useNavigate } from "react-router-dom";
import { fetchBranches } from "../../admin/manage_branches";
import { PiClockCounterClockwiseDuotone } from "react-icons/pi";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import "swiper/css/free-mode";
import "swiper/css/navigation";
import "swiper/css/thumbs";
import { FreeMode, Navigation, Thumbs } from "swiper/modules";
import LoadingState from "../reuse/LoadingState";
import { fetchServiceTypes } from "../../admin/manage_service_type";
import RecentBlogs from "../reuse/user/RecentBlogs";
import {
  fetchCartSuggestions,
  fetchWeatherSuggestions,
} from "../../services/suggestion";
import { jwtDecode } from "jwt-decode";
import { fetchServices } from "../../admin/manage_service";
import { addToCart } from "../../services/cart";
import { Bounce, ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const HomePage = () => {
  const navigate = useNavigate();
  const [branches, setBranches] = useState([]);
  const [weatherSuggestion, setWeatherSuggestion] = useState([]);
  const [cartSuggestion, setCartSuggestion] = useState([]);
  const [serviceTypes, setServiceTypes] = useState([]);
  const [isLogin, setIsLogin] = useState(false);
  const [key, setKey] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [isFetchingBranchesFail, setIsFetchingBranchesFail] = useState(true);
  const [isFetchingSuggestionFail, setIsFetchingSuggestionFail] =
    useState(true);
  const [isFetchingWeatherSuggestionFail, setIsFetchingWeatherSuggestionFail] =
    useState(true);
  const [isFetchingServiceFail, setIsFetchingServiceFail] = useState(true);
  const [messagebyWeather, setMessageByWeather] = useState(false);
  const [iconbyWeather, setIconByWeather] = useState(false);

  const token = localStorage.getItem("token");
  let userId = null;
  const [role, setRole] = useState(null);

  const getUserIdFromToken = () => {
    if (token) {
      try {
        const decoded = jwtDecode(token);
        setIsLogin(true);
        userId = decoded?.AccountId || null;
        setRole(
          decoded[
            "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
          ]
        );
      } catch (error) {}
    }
  };

  useEffect(() => {
    getUserIdFromToken();
    setIsLoading(true);
    fetchBranches()
      .then((data) => {
        setBranches(data.filter((x) => x.statusDelete !== false));
        setIsFetchingBranchesFail(false);
      })
      .catch((error) => {
        setIsFetchingBranchesFail(true);
      });

    fetchServiceTypes()
      .then((data) => {
        setIsFetchingServiceFail(false);
        setServiceTypes(data.filter((x) => x.statusDelete !== false));
      })
      .catch((error) => {
        setIsFetchingServiceFail(true);
      });

    fetchWeatherSuggestions()
      .then((data) => {
        setWeatherSuggestion(data);
        setIsFetchingWeatherSuggestionFail(false);
        switch (data.weather) {
          case "Rain":
            setMessageByWeather(
              "H√¥m nay tr·ªùi m∆∞a, alo cho Gi·∫∑t L√† Nhanh ƒë·ªÉ ƒë·ªì s·∫°ch kh√¥ nhanh ch√≥ng th√¥i n√†o "
            );
            setIconByWeather("üåßÔ∏è");
            break;
          case "Clear":
            setMessageByWeather(
              "H√¥m nay tr·ªùi n·∫Øng, h√£y ƒë·ªÉ Gi·∫∑t L√† Nhanh gi√∫p b·∫°n gi·∫∑t s·∫°ch qu·∫ßn √°o nh√©! "
            );
            setIconByWeather("‚òÄÔ∏è");
            break;
          case "Clouds":
            setMessageByWeather(
              "H√¥m nay tr·ªùi √¢m u, h√£y ƒë·ªÉ Gi·∫∑t L√† Nhanh gi√∫p b·∫°n gi·∫∑t s·∫°ch qu·∫ßn √°o nh√©!"
            );
            setIconByWeather("üå®Ô∏è");
            break;

          default:
            setMessageByWeather(
              "C√°c d·ªãch v·ª• gi·∫∑t l√† ph√π h·ª£p v·ªõi th·ªùi ti·∫øt h√¥m nay, h√£y ƒë·ªÉ Gi·∫∑t L√† Nhanh gi√∫p b·∫°n gi·∫∑t s·∫°ch qu·∫ßn √°o nh√©!"
            );
            setIconByWeather("üå§Ô∏è");
            break;
        }
      })
      .catch((error) => {
        isFetchingWeatherSuggestionFail(true);
      });

    fetchCartSuggestions(userId)
      .then((data) => {
        setCartSuggestion(data);
        console.log(data);

        setIsFetchingSuggestionFail(false);
      })
      .catch((error) => {
        setIsFetchingSuggestionFail(true);
      });

    setIsLoading(false);
  }, []);

  const handleViewAllBranches = () => {
    navigate("/user/branches");
  };

  const handleBranchDetail = (id) => {
    navigate(`/user/branches/${id}`);
  };

  const handleServiceDetail = (id) => {
    document.getElementById("top").scrollIntoView({
      behavior: "smooth",
    });
    navigate(`/user/services/service-type/${id}`);
  };

  const handleViewAllServices = () => {
    navigate("/user/services");
  };

  const [thumbsSwiper, setThumbsSwiper] = useState(null);

  const handleLoginBeforeAddToCart = () => {
    if (isLogin) {
    } else {
      toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi th√™m v√†o gi·ªè h√†ng!", {
        className: "custom_toast",
        position: "top-right",
        autoClose: 1000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: false,
        draggable: true,
      });
      setTimeout(() => {
        navigate("/login");
      }, 1000);
    }
  };

  const handleAddToCart = async (serviceId, productID, quantity, price) => {
    try {
      const item = {
        serviceId,
        productID,
        quantity:
          productID === undefined || productID === null ? null : quantity,
        price,
      };

      await addToCart(item);

      toast.success("ƒê√£ th√™m v√†o gi·ªè h√†ng!", {
        className: "custom_toast",
        position: "top-right",
        autoClose: 1000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: false,
        draggable: true,
      });
      setKey((prevKey) => prevKey + 1);
    } catch (error) {}
  };

  return (
    <>
      {isLoading ? (
        <div className="loading-state">
          <LoadingState></LoadingState>
        </div>
      ) : (
        <>
          <div className="laundry-container">
            <Header key={key}></Header>
            <section className="hero">
              <ToastContainer
                position="top-right"
                autoClose={3000}
                hideProgressBar={false}
                newestOnTop={false}
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
                limit={3}
                transition={Bounce}
              />
              <div className="hero-content">
                {!isLogin || role === "Admin" ? (
                  <div className="hero-banner">
                    <h2>Bu√¥ng b·ªè b·ªôn b·ªÅ c√πng v·ªõi Gi·∫∑t L√† Nhanh</h2>
                    <p onClick={() => handleViewAllServices()}>Xem d·ªãch v·ª•</p>
                  </div>
                ) : (
                  <div className="branch-container">
                    <div className="branch-title">
                      <div className="weather-section">
                        <span>G·ª£i √Ω cho b·∫°n</span>
                        <a>
                          D·ª±a tr√™n l·ªãch s·ª≠ gi·∫∑t l√† c·ªßa b·∫°n, ch√∫ng t√¥i ƒë√£ t√¨m ra
                          nh·ªØng d·ªãch v·ª• ph√π h·ª£p nh·∫•t v·ªõi b·∫°n, gi√∫p b·∫°n ti·∫øt ki·ªám
                          th·ªùi gian.
                        </a>
                      </div>
                    </div>
                    <div className="branch-list">
                      {isFetchingSuggestionFail ? (
                        <></>
                      ) : (
                        <>
                          {cartSuggestion?.length < 4 ? (
                            <>
                              {(cartSuggestion?.length > 0
                                ? cartSuggestion.slice(0, 4)
                                : []
                              ).map((b) => {
                                const price =
                                  b.productId == null
                                    ? 0
                                    : (b.productPrice || 0) +
                                      (b.servicePrice || 0);
                                return (
                                  <div
                                    key={`cart-${b.serviceId}-${b.productId}`}
                                    className="branch"
                                    onClick={() => {
                                      handleAddToCart(
                                        b.serviceId,
                                        b.productId,
                                        b.quantity,
                                        price
                                      );
                                    }}
                                  >
                                    <div className="branch-img">
                                      <div className="img-stack">
                                        <img
                                          src={`http://localhost:5000/${b.serviceImage}`}
                                          className="img-main"
                                        />
                                        {b.productId != null && (
                                          <img
                                            src={`http://localhost:5000/${b.productImage}`}
                                            className="img-overlay"
                                          />
                                        )}
                                      </div>
                                    </div>
                                    <div className="branch-info">
                                      <span>D·ªãch v·ª•: {b.serviceName}</span>
                                      <br />
                                      <a>
                                        {b.productId
                                          ? `${b.productName} (${b.quantity} c√°i)`
                                          : "1kg"}
                                      </a>
                                    </div>
                                    <div className="branch-book">
                                      <FaArrowCircleRight />
                                      <span>Th√™m v√†o gi·ªè h√†ng ngay</span>
                                    </div>
                                  </div>
                                );
                              })}

                              {(weatherSuggestion?.suggestions?.length > 0
                                ? weatherSuggestion.suggestions.slice(
                                    0,
                                    4 - (cartSuggestion?.length || 0)
                                  )
                                : []
                              ).map((b) => {
                                const price =
                                  b.productId == null
                                    ? 0
                                    : (b.productPrice || 0) +
                                      (b.servicePrice || 0);
                                return (
                                  <div
                                    key={`weather-${b.serviceId}-${b.productId}`}
                                    className="branch"
                                    onClick={() => {
                                      handleAddToCart(
                                        b.serviceId,
                                        b.productId,
                                        b.quantity,
                                        price
                                      );
                                    }}
                                  >
                                    <div className="branch-img">
                                      <div className="img-stack">
                                        <img
                                          src={b.serviceImage}
                                          className="img-main"
                                        />
                                        {b.productId != null && (
                                          <img
                                            src={b.productImage}
                                            className="img-overlay"
                                          />
                                        )}
                                      </div>
                                    </div>
                                    <div className="branch-info">
                                      <span>D·ªãch v·ª•: {b.serviceName}</span>
                                      <br />
                                      <a>
                                        {b.productId
                                          ? `${b.productName} (${b.quantity} c√°i)`
                                          : "1kg"}
                                      </a>
                                    </div>
                                    <div className="branch-book">
                                      <FaArrowCircleRight />
                                      <span>Th√™m v√†o gi·ªè h√†ng ngay</span>
                                    </div>
                                  </div>
                                );
                              })}
                            </>
                          ) : (
                            <>
                              {cartSuggestion?.slice(0, 4).map((b) => {
                                return (
                                  <div
                                    className="branch"
                                    onClick={() => {
                                      const price =
                                        b.productId == null
                                          ? 0
                                          : (b.productPrice || 0) +
                                            (b.servicePrice || 0);

                                      handleAddToCart(
                                        b.serviceId,
                                        b.productId,
                                        b.quantity,
                                        price
                                      );
                                    }}
                                  >
                                    <div className="branch-img">
                                      <div className="img-stack">
                                        <img
                                          src={`http://localhost:5000/${b.serviceImage}`}
                                          className="img-main"
                                        />
                                        {b.productId != null && (
                                          <img
                                            src={`http://localhost:5000/${b.productImage}`}
                                            className="img-overlay"
                                          />
                                        )}
                                      </div>
                                    </div>

                                    <div className="branch-info">
                                      <span>D·ªãch v·ª•: {b.serviceName}</span>
                                      <br></br>
                                      <a>
                                        {b.productId
                                          ? `${b.productName} (${b.quantity} c√°i)`
                                          : "1kg"}
                                      </a>
                                    </div>
                                    <div className="branch-book">
                                      <FaArrowCircleRight></FaArrowCircleRight>
                                      <span>Th√™m v√†o gi·ªè h√†ng ngay</span>
                                    </div>
                                  </div>
                                );
                              })}
                            </>
                          )}
                        </>
                      )}
                    </div>
                  </div>
                )}

                {!isLogin || role === "Admin" ? (
                  <div className="branch-container">
                    <div className="branch-title">
                      <div className="weather-section">
                        <span>
                          <div className="weather-icon">{iconbyWeather}</div>
                          Th·ªùi ti·∫øt h√¥m nay
                        </span>
                        <a>{messagebyWeather}</a>
                      </div>
                    </div>

                    <div className="branch-list">
                      {isFetchingWeatherSuggestionFail ? (
                        <></>
                      ) : (
                        <>
                          {weatherSuggestion?.suggestions
                            ?.slice(0, 4)
                            .map((b) => {
                              return (
                                <div
                                  className="branch"
                                  onClick={() => {
                                    handleLoginBeforeAddToCart();
                                  }}
                                >
                                  <div className="branch-img">
                                    <div className="img-stack">
                                      <img
                                        src={b.serviceImage}
                                        className="img-main"
                                      />
                                      {b.productId != null && (
                                        <img
                                          src={b.productImage}
                                          className="img-overlay"
                                        />
                                      )}
                                    </div>
                                  </div>

                                  <div className="branch-info">
                                    <span>D·ªãch v·ª•: {b.serviceName}</span>
                                    <br></br>
                                    <a>
                                      {b.productName} ({b.quantity} c√°i)
                                    </a>
                                  </div>
                                  <div className="branch-book">
                                    <FaArrowCircleRight></FaArrowCircleRight>
                                    <span>Th√™m v√†o gi·ªè h√†ng ngay</span>
                                  </div>
                                </div>
                              );
                            })}
                        </>
                      )}
                    </div>
                  </div>
                ) : (
                  <>
                    <div className="branch-container">
                      <div className="branch-title">
                        <div className="weather-section">
                          <span>
                            <div className="weather-icon">{iconbyWeather}</div>
                            Th·ªùi ti·∫øt h√¥m nay
                          </span>
                          <a>{messagebyWeather}</a>
                        </div>
                      </div>

                      <div className="branch-list">
                        {isFetchingWeatherSuggestionFail ? (
                          <></>
                        ) : (
                          <>
                            {weatherSuggestion?.suggestions
                              ?.slice(0, 4)
                              .map((b) => {
                                return (
                                  <div
                                    className="branch"
                                    onClick={() => {
                                      const price =
                                        b.productId == null
                                          ? 0
                                          : (b.productPrice || 0) +
                                            (b.servicePrice || 0);

                                      handleAddToCart(
                                        b.serviceId,
                                        b.productId,
                                        b.quantity,
                                        price
                                      );
                                    }}
                                  >
                                    <div className="branch-img">
                                      <div className="img-stack">
                                        <img
                                          src={b.serviceImage}
                                          className="img-main"
                                        />
                                        {b.productId != null && (
                                          <img
                                            src={b.productImage}
                                            className="img-overlay"
                                          />
                                        )}
                                      </div>
                                    </div>

                                    <div className="branch-info">
                                      <span>D·ªãch v·ª•: {b.serviceName}</span>
                                      <br></br>
                                      <a>
                                        {b.productName} ({b.quantity} c√°i)
                                      </a>
                                    </div>
                                    <div className="branch-book">
                                      <FaArrowCircleRight></FaArrowCircleRight>
                                      <span>Th√™m v√†o gi·ªè h√†ng ngay</span>
                                    </div>
                                  </div>
                                );
                              })}
                          </>
                        )}
                      </div>
                    </div>
                  </>
                )}
              </div>
              <div className="hero-image">
                <div className="bubble-decoration top"></div> {/* Bubble top */}
                <img src="/Picture2.png" alt="Washing Machine" />
                <div className="bubble-decoration bottom"></div>{" "}
                {/* Bubble bottom */}
              </div>
            </section>

            {/* Our Service Section */}
            <section className="service" style={{ marginTop: "50px" }}>
              <div className="service-text appear">
                <h2>
                  <span>Chi nh√°nh </span>c·ªßa ch√∫ng t√¥i
                </h2>
                <p>
                  Ch√∫ng t√¥i c√≥ c√°c chi nh√°nh ph√¢n b·ªë kh·∫Øp H√≤a L·∫°c, b·∫°n c√≥ th·ªÉ
                  xem chi ti·∫øt v√† ch·ªçn c∆° s·ªü ti·ªán nh·∫•t cho m√¨nh. Ch√∫ng t√¥i s·∫Ω c√≥
                  th·ªÉ ƒë·∫øn t·∫≠n n∆°i ƒë·ªÉ nh·∫≠n ƒë·ªì gi·∫∑t v√† giao l·∫°i cho b·∫°n sau khi
                  ho√†n t·∫•t.
                </p>
              </div>
              <div className="service-list appear">
                {isFetchingBranchesFail ? (
                  <>Ch∆∞a c√≥ chi nh√°nh</>
                ) : (
                  <>
                    {branches.slice(0, 4).map((s) => {
                      return (
                        <div
                          className="service-detail"
                          style={{ backgroundImage: `url(${s.image})` }}
                          key={s.serviceTypeId}
                          onClick={() => handleBranchDetail(s.branchId)}
                        >
                          <div className="service-name">
                            <p>
                              {s.branchName}: {s.address}
                            </p>
                          </div>
                        </div>
                      );
                    })}
                  </>
                )}
              </div>
            </section>
            <section className="steps">
              <div className="service-text appear">
                <h2>
                  <span>Quy tr√¨nh </span>l√†m vi·ªác
                </h2>
                <p style={{ textAlign: "center" }}>
                  Quy tr√¨nh l√†m vi·ªác chuy√™n nghi·ªáp, nhanh ch√≥ng v√† ti·ªán l·ª£i. T·ª´
                  kh√¢u ti·∫øp nh·∫≠n, ph√¢n lo·∫°i, gi·∫∑t s·∫°ch ƒë·∫øn s·∫•y kh√¥ v√† ƒë√≥ng g√≥i,
                  ch√∫ng t√¥i ƒë·∫£m b·∫£o qu·∫ßn √°o c·ªßa b·∫°n lu√¥n th∆°m tho, s·∫°ch s·∫Ω
                </p>
              </div>
              <div className="laundry-process appear">
                <div className="step">
                  <div className="icon">üì≤</div>
                  <h3 className="title">Ti·∫øp Nh·∫≠n</h3>
                  <p className="description">Nh·∫≠n y√™u c·∫ßu t·ª´ kh√°ch h√†ng</p>
                </div>

                <div className="arrow-up"></div>

                <div className="step">
                  <div className="icon"> üìë </div>
                  <h3 className="title">Nh·∫≠n ƒê·ªì Gi·∫∑t</h3>
                  <p className="description">Ti·∫øp nh·∫≠n ƒë·ªì, ki·ªÉm tra qu·∫ßn √°o</p>
                </div>

                <div className="arrow-down"></div>

                <div className="step">
                  <div className="icon">üßº</div>
                  <h3 className="title">Gi·∫∑t v√† l√†m s·∫°ch</h3>
                  <p className="description">Ti·∫øn h√†nh gi·∫∑t v√† l√†m s·∫°ch</p>
                </div>

                <div className="arrow-up"></div>

                <div className="step">
                  <div className="icon">üëî</div>
                  <h3 className="title">S·∫•y kh√¥, l√† ·ªßi</h3>
                  <p className="description">
                    Th·ª±c hi·ªán s·∫•y kh√¥, l√† ph·∫≥ng qu·∫ßn √°o
                  </p>
                </div>

                <div className="arrow-down"></div>

                <div className="step">
                  <div className="icon">üì¶</div>
                  <h3 className="title">ƒê√≥ng g√≥i v√† s·∫µn s√†ng</h3>
                  <p className="description">
                    ƒê√≥ng g√≥i, s·∫µn s√†ng giao t·ªõi kh√°ch h√†ng
                  </p>
                </div>
              </div>
            </section>

            <section className="service">
              <div className="service-text appear">
                <h2>
                  <span>D·ªãch v·ª• </span>c·ªßa ch√∫ng t√¥i
                </h2>
                <p>
                  Gi·∫£i ph√°p chuy√™n nghi·ªáp cho trang ph·ª•c h√†ng ng√†y c·ªßa b·∫°n, ƒë·∫£m
                  b·∫£o s·ª± th∆°m m√°t v√† s·∫°ch s·∫Ω sau m·ªói l·∫ßn gi·∫∑t. V·ªõi c√¥ng ngh·ªá
                  gi·∫∑t ti√™n ti·∫øn v√† quy tr√¨nh chuy√™n nghi·ªáp, qu·∫ßn √°o c·ªßa b·∫°n s·∫Ω
                  ƒë∆∞·ª£c gi·ªØ lu√¥n nh∆∞ m·ªõi.
                </p>
              </div>
              <div className="service-list appear">
                {isFetchingServiceFail ? (
                  <>Ch∆∞a c√≥ d·ªãch v·ª•</>
                ) : (
                  <>
                    {serviceTypes.slice(0, 4).map((s) => {
                      return (
                        <div
                          className="service-detail"
                          style={{ backgroundImage: `url(${s.image})` }}
                          key={s.serviceTypeId}
                          onClick={() => handleServiceDetail(s.serviceTypeId)}
                        >
                          <div className="service-name">
                            <p>{s.serviceTypeName}</p>
                            <div className="service-icon">
                              <svg
                                width="24"
                                height="24"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M16.6697 12.5788L8.48825 20.7602C8.41224 20.8363 8.322 20.8965 8.22268 20.9377C8.12336 20.9788 8.01692 21 7.90942 21C7.80192 21 7.69547 20.9788 7.59615 20.9377C7.49684 20.8965 7.40659 20.8363 7.33058 20.7602C7.25457 20.6842 7.19427 20.594 7.15313 20.4947C7.11199 20.3953 7.09082 20.2889 7.09082 20.1814C7.09082 20.0739 7.11199 19.9675 7.15313 19.8681C7.19427 19.7688 7.25457 19.6786 7.33058 19.6026L14.9342 12L7.33058 4.39743C7.17706 4.24391 7.09082 4.0357 7.09082 3.8186C7.09082 3.60149 7.17706 3.39328 7.33058 3.23976C7.4841 3.08624 7.69231 3 7.90942 3C8.12652 3 8.33473 3.08624 8.48825 3.23976L16.6697 11.4212C16.7457 11.4971 16.8061 11.5874 16.8472 11.6867C16.8884 11.786 16.9096 11.8925 16.9096 12C16.9096 12.1075 16.8884 12.214 16.8472 12.3133C16.8061 12.4126 16.7457 12.5029 16.6697 12.5788Z"
                                  fill="white"
                                />
                              </svg>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </>
                )}
              </div>
            </section>

            {/* Our Service Section */}
            <section className="blogg">
              <div className="blog-text appear">
                <h3>
                  <span>B·∫£o Qu·∫£n&nbsp;</span>Qu·∫ßn √Åo Th·∫ø N√†o Cho ƒê√∫ng
                </h3>
                <h2>Gi·∫∑t ƒë√∫ng c√°ch ‚Äì B·ªÅn l√¢u h∆°n</h2>
              </div>
              <div className="blog">
                <div className="swiper-container appear">
                  <Swiper
                    style={{
                      "--swiper-navigation-color": "#fff",
                      "--swiper-pagination-color": "#fff",
                      paddingBottom: "10",
                    }}
                    spaceBetween={10}
                    navigation={true}
                    thumbs={{ swiper: thumbsSwiper }}
                    modules={[FreeMode, Navigation, Thumbs]}
                    className="mySwiper2"
                  >
                    <SwiperSlide>
                      <img src="/blog2.jpg" />
                    </SwiperSlide>

                    <SwiperSlide>
                      <img src="/blog6.webp" />
                    </SwiperSlide>
                    <SwiperSlide>
                      <img src="blog4.jpg" />
                    </SwiperSlide>
                    <SwiperSlide>
                      <img src="/blog3.png" />
                    </SwiperSlide>
                  </Swiper>
                  <Swiper
                    onSwiper={setThumbsSwiper}
                    spaceBetween={10}
                    slidesPerView={4}
                    freeMode={true}
                    watchSlidesProgress={true}
                    modules={[FreeMode, Navigation, Thumbs]}
                    className="mySwiper"
                  >
                    <SwiperSlide>
                      <img src="/blog2.jpg" />
                    </SwiperSlide>
                    <SwiperSlide>
                      <img src="/blog6.webp" />
                    </SwiperSlide>
                    <SwiperSlide>
                      <img src="blog4.jpg" />
                    </SwiperSlide>
                    <SwiperSlide>
                      <img src="/blog3.png" />
                    </SwiperSlide>
                  </Swiper>
                </div>
                <div className="blog-textt appear">
                  <div className="blog-tip appear">
                    <p>
                      <FaCheck color="green" /> Ph√¢n lo·∫°i qu·∫ßn √°o tr∆∞·ªõc khi gi·∫∑t
                    </p>
                    <p>
                      <FaCheck color="green" /> Ch·ªçn nhi·ªát ƒë·ªô n∆∞·ªõc ph√π h·ª£p
                    </p>
                    <p>
                      <FaCheck color="green" /> S·ª≠ d·ª•ng n∆∞·ªõc gi·∫∑t & x·∫£ ph√π h·ª£p
                    </p>
                    <p>
                      <FaCheck color="green" /> ·ª¶i/l√† ·ªü nhi·ªát ƒë·ªô ph√π h·ª£p
                    </p>
                  </div>

                  <div className="blog-beg appear">
                    <h5>
                      <FaHandPointRight color="#efbc15" /> Kh√¥ng c√≥ th·ªùi gian
                      chƒÉm s√≥c qu·∫ßn √°o? H√£y ƒë·ªÉ ch√∫ng t√¥i gi√∫p b·∫°n!
                    </h5>
                    <h5>
                      <FaWater color="blue" /> D·ªãch v·ª• gi·∫∑t l√† chuy√™n nghi·ªáp ‚Äì
                      Nhanh ch√≥ng ‚Äì Ti·ªán l·ª£i
                    </h5>
                    <h5>
                      <FaPhone color="red" /> G·ªçi ngay 09474523737 ƒë·ªÉ gi·ªØ qu·∫ßn
                      √°o c·ªßa b·∫°n lu√¥n nh∆∞ m·ªõi!
                    </h5>
                  </div>
                </div>
              </div>
            </section>

            <div className="recent-blog-container">
              <div className="blog-text appear">
                <h3>
                  <span>B√†i vi·∫øt&nbsp;</span>g·∫ßn ƒë√¢y
                </h3>
              </div>
              <RecentBlogs></RecentBlogs>
            </div>

            {/* Footer Section */}
            <Footer></Footer>
          </div>
        </>
      )}
    </>
  );
};

export default HomePage;
